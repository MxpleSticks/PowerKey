import base64
import time
import tkinter as tk
from tkinter import ttk, messagebox
from tkinter import filedialog
import keyboard
import subprocess
import threading
import json
from pathlib import Path
import os
import sys
import winreg

class HotkeyManager:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("PowerKey")
        self.root.geometry("700x500")
        self.root.resizable(False, False)

        # Load settings or set defaults
        self.settings = self.load_settings()

        # Initialize color themes
        self.themes = {
            'dark': {
                'bg': '#1e1e1e',
                'fg': '#ffffff',
                'accent': '#007acc',
                'button': '#2d2d2d',
                'entry': '#2d2d2d',
                'hover': '#3d3d3d',
                'border': '#404040',
                'success': '#4CAF50',
                'error': '#f44336',
                'button_text': '#ffffff'
            },
            'light': {
                'bg': '#f0f0f0',
                'fg': '#000000',
                'accent': '#0066cc',
                'button': '#e0e0e0',
                'entry': '#ffffff',
                'hover': '#e8e8e8',
                'border': '#d0d0d0',
                'success': '#4CAF50',
                'error': '#f44336',
                'button_text': '#ffffff'
            }
        }

        # Set current theme based on settings
        self.colors = self.themes[self.settings['theme']]

        # Set window transparency
        self.root.attributes('-alpha', self.settings['transparency'] / 100)

        # Icon setup
        icon = """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
AAAAAAAAAAAAAAAAAAAAAAAAALvdAAC89gAAvPRFALz16QC89f8AvPX/ALz1/wC89c8AvPQkAL30
AABX/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL/1AAC99AoAu/SfALz04gC89eAA
vPXgALz03AC89FYAvPAAALz2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu/QAALn0
AAC79BIAvPQgALz0IAC89CAAvPQgAL30EQDA9wAAvfUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////n////4////8D///+Af
///gB///wAP//4AA//+AAH//gAB///wH///8A////gP///4D////Af///wH///+A//wAAP/8AAB/
/gAAf/4AAD//AAA//wAAP/8A////gP///4B////Af///wH///+A////gP///8D///////ygAAAAw
AAAAYAAAAAEAIAAAAAAAACQAABMLAAATCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL32AAC99gkAu/YOALv2AgC7
9gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
u+wAALvtAQC99l4Au/aDALn1LAC99wYAw/kAAMH4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAu/QAALv0JQC89c4AvPX9ALv00AC99VQAu/UUALv1AQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC+8wAAvvIIALv1lwC89fUAvPX/
ALz1/wC89fAAvPWKALz1KgC49QMAtvUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAC88wAAvPNSALv04wC89f8AvPX/ALz1/wC89f8AvPX7ALz1wwC79U4AuvUQALn1AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAALr3AAC59yAAu/S/ALz1/gC89f8AvPX/ALz1/wC89f8AvPX/ALz1
/wC89egAu/V9ALv0KQD0/wAAOFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvvQAAMHzBAC79IcAvPXxALz1/wC8
9f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX4ALv0twC89EsAvvQOAL70AAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
u/UAALv1RwC79NkAvPX/ALz1/wC99f8AvfX/AL31/wC99f8AvfX/AL31/wC99f8AvfX/ALz1/wC8
9eEAvPR6ALz1JQC89QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAC79QAAu/QbALv1rwC89f0AvPX/ALz1/wCx9P8ArvP/AK7z/wCu8/8A
rvP/AK7z/wCu8v8AsPP/ALv1/wC89f8AvPXzALz1rAC89UcAu/gJALv3AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAML4AAD8/wEAvPR3ALz17AC89f8AvPX/
ALz1/wCf8f8Aiu3/AIjt/wCI7f8AiO3/AIjt/wCI7f8Aju7/AK3z/wC89f8AvPX/ALz1/gC89NcA
u/V0ALv1HwC79QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALz1
AAC79UAAvPXQALz1/wC89f8AvPX/ALz1/wCr8v8Af+z/AHfr/wB36/8Ad+v/AHfr/wB36/8Aeev/
AJPv/wC89f8AvPX/ALz1/wC89f8AvPXvALz1qAC89UMAvvMHAL30AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAv/cAAML5BwC89XQAvPXGALz1zAC89csAvPXLALz1ywC69csAk+/yAIft
/gCH7f8Ah+3/AIft/wCH7f8Ah+3/AI/u+gC0894AvPXKALz1ywC89csAvPXNALz1ygC89ZoAvfQ7
AMH2BAC/9QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv/cAAMD4BwC99SsAvPU7ALz1OQC8
9TkAvPU5ALz1OQC89ToAp/JuAK3y8ACt8/8ArfP/AK3z/wCt8/8ArfP/AK7z+QC287AAvfU2ALz1
OQC89TkAvPU5ALz1OgC89D0AvfQkAMH2BAC/9QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADU/wAAyfoMAL30ugC99fsAvfX/AL31/wC9
9f8AvfX/AL31/wC89cYAufcgALr3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
u/QCALv0WAC89fEAvPX/ALz1/wC89f8AvPX/ALz1/wC89e0AvPR4ALz0AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAvPUAALz1FAC89McAvPX9ALz1/wC89f8AvPX/ALz1/wC89f8A
vPW+ALzyGgC88wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL31BQC89WoAvPX2
ALz1/wC89f8AvPX/ALz1/wC89f8AvPXnALv1aAC79QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAMH2AQC+9RoAu/XTALz1/gC89f8AvPX/ALz1/wC89f8AvPX/ALz1swC49BMAufQA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALz0AAC89AcAvPR5ALz1+QC89f8AvPX/ALz1
/wC89f8AvPX/ALz14AC89VoAvPUAALv2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALr3AAC6
+AEAu/YjALz14AC89f4AvPX/ALz1/wC89f8AvPX/ALz1/wC79KUAu/cLALv2AAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAKv/AAC+8wAAu/QLALv0iAC89fsAvPX/ALz1/wC89f8AvPX/ALz1/wC8
9dcAu/VMALv2AAC/7wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC78QAAuu4BALzzLQC89egA
vPX/ALz1/wC89f8AvPX/ALz1/wC89f4Au/WWAMPpBQC+8QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAC7yQAAvPYAALz0DwC89JYAvPX9ALz1/wC89f8AvPX/ALz1/wC89f8AvPXOALz0QAC88wAA
wv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC99QAAvvUDALz1EQC79RsAu/UaALv1GgC79RoAu/UaALv1
GgC79RoAu/UaALv1GgC79RoAu/UaALv1GgC79RoAu/UaALv1HAC89VIAu/T5ALz1/wC89f8AvPX/
ALz1/wC89f8AvPX7ALv1iADE/wEAvfgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC99QAAvvUVALz1iwC7
9e4Au/XqALv16gC79eoAu/XqALv16gC79eoAu/XqALv16gC79eoAu/XqALv16gC79eoAu/XqALv1
6gC79e0AvPT9ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1xAC79DUAu/QAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAACw/AAAvvIAALv0WQC89esAvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC8
9f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1
9wC89XgA/PIAALP1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACq/wAAu/UAALv1IgC79asAvPX/ALz1/wC89f8A
vPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC8
9f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89bgAu/QqALv0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsf8A
AMTtAAC79WgAvPXyALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8A
vPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89fAAu/RpAMDxAAC6
9QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAALz1AAC89SoAvPW4ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/
ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8A
vPX/ALz1/wC89f8AvPWqALr0IAC69AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALjyAADK/AAAu/R3ALz1
9gC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/
ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPXrALv0XgDB5gAAuvkAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAC79QAAu/Q0ALz1wwC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89fwAvPXSALz1
zAC89cwAvPXMALz1zAC89cwAvPXMALz1zAC89cwAvPXMALz1zAC89cwAvPXMALz1zAC89cwAvPXS
ALz1cwC69wwAu/YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6+QAAtP8DALz0hwC89foAvPX/ALz1/wC8
9f8AvPX/ALz1/wC89PkAu/VvALv1PAC79TkAu/U5ALv1OQC79TkAu/U5ALv1OQC79TkAu/U5ALv1
OQC79TkAu/U5ALv1OQC79TkAu/U6ALv0KgC88goAvPMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
u/QAALv0PwC89c4AvPX/ALz1/wC89f8AvPX/ALz1/wC89f0Au/WUALv1DgC79QAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAvPUAAL32BgC89ZUAvPX8ALz1/wC89f8AvPX/ALz1/wC89f8A
vPXmALz0MAC98gIAvPMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALz0AAC89E4AvPXY
ALz1/wC89f8AvPX/ALz1/wC89f8AvPX7ALv1hgC79AoAu/QAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAL71AADA9gwAvPWjALz1/gC89f8AvPX/ALz1/wC89f8AvPX+ALz13QC69CcAuPQB
ALj0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC79QAAu/VbALz14QC89f8AvPX/ALz1
/wC89f8AvPX/ALz1+QC89XgAvPUHALz1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC7
9QAAu/USALz1sgC89f8AvPX/ALz1/wC89f8AvPX/ALz1/gC79NQAu/UcALv2AQAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu/QAALv0agC89egAvPX/ALz1/wC89f8AvPX/ALz1/wC8
9fYAu/VoALv1BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu/IAALvyGAC89b8A
vPX/ALz1/wC89f8AvPX/ALz1/wC89f0Au/XJAL3yEgDA7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAu+UAALz6AAC89HcAvPXtALz1/wC89f8AvPX/ALz1/wC89f8AvPXxALz0WgC89AMA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL30AAC+9CAAu/TMALz1/wC89f8AvPX/
ALz1/wC89f8AvPX8ALz0vAC1+QoAqv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMD1
AACQ6AAAu/R8ALz01gC89OEAvPTgALz04AC89OAAvPTgALz0zAC99TwAvfUBAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC79AAAu/QPALz0HAC89B4AvPQeALz0HgC89B4AvPQeALz0
HAC99QoAvfUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAD///////8AAP///////wAA///x////AAD//+D///8AAP//4D///wAA
///AH///AAD//8AP//8AAP//gAf//wAA//8AAf//AAD//wAA//8AAP/+AAA//wAA//wAAB//AAD/
/AAAB/8AAP/4AAAD/wAA//gAAAP/AAD///gB//8AAP//+AH//wAA///8AP//AAD///wA//8AAP//
/AB//wAA///+AH//AAD///4AP/8AAP///wA//wAA////AB//AAD///+AH/8AAP+AAAAP/wAA/4AA
AA//AAD/wAAAD/8AAP/AAAAH/wAA/+AAAAf/AAD/4AAAA/8AAP/wAAAD/wAA//AAAAH/AAD/8AAA
Af8AAP/4Af///wAA//gA////AAD//AD///8AAP/8AH///wAA//4Af///AAD//gA///8AAP//AD//
/wAA//8AP///AAD//4Af//8AAP//gB///wAA///AD///AAD//8Af//8AAP///////wAA////////
AAAoAAAAMgAAAGQAAAABACAAAAAAABAnAAATCwAAEwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL32WQC79nIAf/8CAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAC78RMAvPXpALz1/wC79MUAv/ckAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALv1owC89f8AvPX/ALz1/wC8
9fEAu/VmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAC980IAu/T+ALz1/wC89f8AvPX/ALz1/wC89f8AvPW3ALr1GgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsv8KALv03AC89f8AvPX/ALz1/wC89f8A
vPX/ALz1/wC89f8AvPXqALr1UgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAC79YwAvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALv0qgC48BIA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvfQvALv0+gC89f8AvPX/ALz1/wC89f8AvPX/
ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz15gC99EoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL//
BAC79cwAvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/
ALv0/gC89ZkAuf8LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu/R1ALz1/wC89f8AvPX/ALz1/wCe8f8Ame//AJnv
/wCZ7/8Ame//AJnv/wCZ7/8Ame//ALb0/wC89f8AvPX/ALz1/wC89N0Au/Y8AAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL/3IAC8
9PQAvPX/ALz1/wC89f8AvPX/AJnw/wB56/8Aeev/AHnr/wB56/8Aeev/AHnr/wB56/8AmvD/ALz1
/wC89f8AvPX/ALz1/wC79PsAu/WIAKr/BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu/W5ALz1/wC89f8AvPX/ALz1/wC89f8AtvT/AHzs/wB5
6/8Aeev/AHnr/wB56/8Aeev/AHnr/wB96/8AufT/ALz1/wC89f8AvPX/ALz1/wC89f8AvPXSAL30
LwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL/3JAC89ZkA
vPWZALz1mQC89ZkAvPWZALz1mQC89ZkAnfDnAJTv/wCU7/8AlO//AJTv/wCU7/8AlO//AJTv/wCr
8tAAvPWZALz1mQC89ZkAvPWZALz1mQC89ZkAvPSRAL/1HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6+CUA
vPT9ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz03gC//wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC79K4AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8A
vPX/ALr2VgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ALz1NgC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPTLAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALz0wwC89f8AvPX/ALz1/wC89f8AvPX/
ALz1/wC89f8AvPNBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAvfVOALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC79bYAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wEAu/XVALz1/wC89f8AvPX/ALz1
/wC89f8AvPX/ALz1/wC59DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAC89GMAvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1oQAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALb/BwC89eYAvPX/ALz1/wC8
9f8AvPX/ALz1/wC89f8Au/T6ALv2HgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAALv0eQC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8Au/WLAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu+4PALz18AC89f8A
vPX/ALz1/wC89f8AvPX/ALz1/wC79fIAv+8QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAvPSOALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89HYA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/9RwAu/T6
ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALv15wC//wgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAC99U4Au/XuALv17gC79e4Au/XuALv17gC79e4Au/XuALv17gC79e4Au/XuALv1
7gC79e4Au/XuALv17gC79e4Au/XuALv17gC89PwAvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/
ALv0YgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKr/AwC79NwAvPX/ALz1/wC8
9f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1
/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPXXAH//AgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAALv1bgC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC8
9f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1
/wC89f8Au/RMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsv8KALv16wC89f8A
vPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC8
9f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC79MEAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAvPWDALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8A
vPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC8
9f8AvPX/ALz1/wC69TgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC58xYAu/T2
ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8A
vPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALv0qwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC79JgAvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/
ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8A
vPX/ALz1/wC89f8AvPT9ALr4JQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALr4
JQC89P0AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPT4ALv1agC79WYAu/VmALv1ZgC79WYAu/Vm
ALv1ZgC79WYAu/VmALv1ZgC79WYAu/VmALv1ZgC79WYAu/VmALv1ZgC79WYAvPMuAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALv0rgC89f8AvPX/ALz1/wC89f8AvPX/ALz1
/wC89f8Au/ZXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAvPU2ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC79cwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvPTDALz1/wC89f8AvPX/ALz1/wC8
9f8AvPX/ALz1/wC880EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAC99U4AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALv1tgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AQC79dUAvPX/ALz1/wC89f8A
vPX/ALz1/wC89f8AvPX/ALn0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAALz0ZAC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPWhAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtv8HALz15gC89f8AvPX/
ALz1/wC89f8AvPX/ALz1/wC79PoAu/YeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAu/R5ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz1/wC79YsAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC77g8AvPXwALz1
/wC89f8AvPX/ALz1/wC89f8AvPX/ALv18gC/7xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC89I4AvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPX/ALz0
dgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL/1HAC7
9PoAvPX/ALz1/wC89f8AvPX/ALz1/wC89f8AvPTlAKr/BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALv0kwC89N0AvPTdALz03QC89N0AvPTdALz03QC8
9N0AvfVOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAP///////8AA////////wAD////////AAP//+P///8AA///wf///wAD///A////A
AP//4A///8AA///AB///wAD//8AB///AAP//gAD//8AA//8AAD//wAD//wAAH//AAP/+AAAH/8AA
//4AAAP/wAD//AAAAf/AAP///AD//8AA///+AP//wAD///4A///AAP///wB//8AA////AH//wAD/
//8AP//AAP///4A//8AA////gB//wAD////AH//AAP///8AP/8AA////4A//wAD////gB//AAP/A
AAAH/8AA/8AAAAP/wAD/4AAAA//AAP/gAAAD/8AA//AAAAH/wAD/8AAAAf/AAP/4AAAA/8AA//gA
AAD/wAD//AH////AAP/8Af///8AA//4A////wAD//gD////AAP/+AH///8AA//8Af///wAD//wA/
///AAP//gD///8AA//+AH///wAD//8Af///AAP//wA///8AA///gD///wAD////////AAP//////
/8AA////////wAA="""
        icondata = base64.b64decode(icon)
        tempFile = "icon.ico"
        iconfile = open(tempFile, "wb")
        iconfile.write(icondata)
        iconfile.close()
        self.root.wm_iconbitmap(tempFile)
        os.remove(tempFile)

        self.setup_styles()

        # Initialize hotkeys dictionary and load saved hotkeys
        self.hotkeys = {}
        self.load_hotkeys()

        # Initialize startup state
        self.startup_enabled = self.check_startup_status()

        self.setup_gui()

        # Debounce mechanism
        self.last_trigger_time = time.time()
        self.debounce_interval = 0.5  # Time in seconds to ignore repeated triggers

        # Start hotkey listener if enabled
        if self.settings['hotkeys_enabled']:
            self.start_listener()

    def setup_styles(self):
        self.style = ttk.Style()
        self.style.theme_use('default')

        self.style.configure('TFrame', background=self.colors['bg'])
        self.style.configure('TLabel',
                           background=self.colors['bg'],
                           foreground=self.colors['fg'],
                           font=('Segoe UI', 10))

        self.style.configure('TButton',
                           background=self.colors['button'],
                           foreground=self.colors['button_text'],
                           font=('Segoe UI', 10),
                           padding=8)

        self.style.configure('Accent.TButton',
                           background=self.colors['accent'],
                           foreground=self.colors['button_text'],
                           font=('Segoe UI', 10, 'bold'),
                           padding=8)

        self.style.configure('TEntry',
                           fieldbackground=self.colors['entry'],
                           foreground=self.colors['fg'],
                           font=('Segoe UI', 10),
                           padding=8)

        self.style.map('TButton',
                      foreground=[('active', self.colors['button_text'])],
                      background=[('active', self.colors['hover'])])

        self.style.map('Accent.TButton',
                      foreground=[('active', self.colors['button_text'])],
                      background=[('active', self.colors['accent'])])

        self.root.configure(bg=self.colors['bg'])

    def load_settings(self):
        default_settings = {
            'theme': 'dark',
            'transparency': 100,
            'hotkeys_enabled': True,
        }

        settings_path = Path.home() / '.hotkey_manager_settings.json'
        if settings_path.exists():
            try:
                with open(settings_path) as f:
                    return {**default_settings, **json.load(f)}
            except:
                return default_settings
        return default_settings

    def save_settings(self):
        settings_path = Path.home() / '.hotkey_manager_settings.json'
        with open(settings_path, 'w') as f:
            json.dump(self.settings, f)

    def show_settings(self):
        settings_window = tk.Toplevel(self.root)
        settings_window.title("Settings")
        settings_window.configure(bg=self.colors['bg'])

        window_width = 400
        window_height = 350  # Increased height to accommodate new buttons
        screen_width = settings_window.winfo_screenwidth()
        screen_height = settings_window.winfo_screenheight()
        center_x = int((screen_width/2) - (window_width/2))
        center_y = int((screen_height/2) - (window_height/2))

        settings_window.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')
        settings_window.resizable(False, False)
        settings_window.transient(self.root)
        settings_window.grab_set()

        settings_frame = ttk.Frame(settings_window, padding="20")
        settings_frame.pack(expand=True, fill=tk.BOTH)

        # Theme selection
        theme_frame = ttk.Frame(settings_frame)
        theme_frame.pack(fill=tk.X, pady=(0, 20))

        ttk.Label(theme_frame, text="Theme:").pack(side=tk.LEFT)
        theme_var = tk.StringVar(value=self.settings['theme'])
        theme_menu = ttk.OptionMenu(theme_frame, theme_var, self.settings['theme'], 'light', 'dark')
        theme_menu.pack(side=tk.LEFT, padx=(10, 0))

        # Hotkeys toggle
        hotkeys_frame = ttk.Frame(settings_frame)
        hotkeys_frame.pack(fill=tk.X, pady=(0, 20))

        hotkeys_var = tk.BooleanVar(value=self.settings['hotkeys_enabled'])
        hotkeys_check = ttk.Checkbutton(hotkeys_frame, text="Enable Hotkeys", variable=hotkeys_var)
        hotkeys_check.pack(side=tk.LEFT)

        # Transparency slider
        transparency_frame = ttk.Frame(settings_frame)
        transparency_frame.pack(fill=tk.X, pady=(0, 20))

        ttk.Label(transparency_frame, text="Window Transparency:").pack(anchor=tk.W)
        transparency_var = tk.IntVar(value=self.settings['transparency'])
        transparency_scale = ttk.Scale(transparency_frame, from_=50, to=100, variable=transparency_var, orient=tk.HORIZONTAL)
        transparency_scale.pack(fill=tk.X)

        # Import/Export buttons
        import_export_frame = ttk.Frame(settings_frame)
        import_export_frame.pack(fill=tk.X, pady=(0, 20))

        export_button = ttk.Button(import_export_frame,
                                text="Export Hotkeys",
                                style='Accent.TButton',
                                command=self.export_hotkeys)
        export_button.pack(side=tk.LEFT, padx=(0, 5))

        import_button = ttk.Button(import_export_frame,
                                text="Import Hotkeys",
                                style='Accent.TButton',
                                command=self.import_hotkeys)
        import_button.pack(side=tk.LEFT)

        def apply_settings():
        # Save new settings
            self.settings['theme'] = theme_var.get()
            self.settings['hotkeys_enabled'] = hotkeys_var.get()
            self.settings['transparency'] = transparency_var.get()

            # Apply theme
            self.colors = self.themes[self.settings['theme']]

            # Handle hotkey listener
            if self.settings['hotkeys_enabled']:
                self.start_listener()
            else:
                keyboard.unhook_all()

            # Save settings to file
            self.save_settings()

            # Perform complete interface refresh
            self.refresh_interface()

            # Update status
            self.status_var.set("Settings updated")

            # Close settings window
            settings_window.destroy()

        # Buttons
        button_frame = ttk.Frame(settings_frame)
        button_frame.pack(pady=(20, 0))

        ttk.Button(button_frame, text="Apply", style='Accent.TButton', command=apply_settings).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Cancel", command=settings_window.destroy).pack(side=tk.LEFT, padx=5)

    def setup_gui(self):
        container = ttk.Frame(self.root, padding="20", relief="flat", borderwidth=0)
        container.pack(fill=tk.BOTH, expand=True)

        header_frame = ttk.Frame(container)
        header_frame.pack(fill=tk.X, pady=(0, 30))

        title_label = ttk.Label(header_frame,
                                text="PowerKey",
                                font=('Segoe UI', 24, 'bold'),
                                foreground=self.colors['accent'])
        title_label.pack(side=tk.LEFT)

        subtitle_label = ttk.Label(header_frame,
                                text="Hotkey Manager",
                                font=('Segoe UI', 12),
                                foreground='#888888')
        subtitle_label.pack(side=tk.LEFT, padx=(10, 0), pady=(8, 0))

        button_frame = ttk.Frame(header_frame)
        button_frame.pack(side=tk.RIGHT)

        # Settings button
        settings_button = ttk.Button(button_frame,
                                   text="⚙",
                                   width=3,
                                   style='Accent.TButton',
                                   command=self.show_settings)
        settings_button.pack(side=tk.RIGHT, padx=(10, 0), pady=(15, 0))

        # Startup toggle button
        self.startup_var = tk.StringVar(value="Startup: " + ("ON" if self.startup_enabled else "OFF"))
        startup_button = ttk.Button(button_frame,
                                    textvariable=self.startup_var,
                                    style='Accent.TButton',
                                    command=self.toggle_startup)
        startup_button.pack(side=tk.RIGHT, padx=(10, 0), pady=(15, 0))

        help_button = ttk.Button(button_frame,
                                text="?",
                                width=3,
                                style='Accent.TButton',
                                command=self.show_help)
        help_button.pack(side=tk.RIGHT, padx=(10, 0), pady=(15, 0))

        # Input section
        input_frame = ttk.Frame(container)
        input_frame.pack(fill=tk.X, pady=(0, 20))

        # Command key input
        key_frame = ttk.Frame(input_frame)
        key_frame.pack(side=tk.LEFT, padx=(0, 20))

        ttk.Label(key_frame,
                text="HOTKEY COMBINATION",
                font=('Segoe UI', 8),
                foreground='#888888').pack(anchor=tk.W)

        key_input_frame = ttk.Frame(key_frame)
        key_input_frame.pack(fill=tk.X)

        ttk.Label(key_input_frame,
                text="Ctrl+Shift+Alt+",
                font=('Segoe UI', 10)).pack(side=tk.LEFT)

        self.command_key = ttk.Entry(key_input_frame, width=5)
        self.command_key.pack(side=tk.LEFT, padx=(5, 0))

        # Action input
        action_frame = ttk.Frame(input_frame)
        action_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)

        ttk.Label(action_frame,
                text="ACTION",
                font=('Segoe UI', 8),
                foreground='#888888').pack(anchor=tk.W)

        self.action = ttk.Entry(action_frame)
        self.action.pack(fill=tk.X)

        # Add button
        add_button = ttk.Button(input_frame,
                                text="Add Hotkey",
                                style='Accent.TButton',
                                command=self.add_hotkey)
        add_button.pack(side=tk.LEFT, padx=(10, 0), pady=(15, 0))

        # Separator
        separator = ttk.Frame(container, height=2)
        separator.pack(fill=tk.X, pady=20)
        separator.configure(style='Separator.TFrame')
        self.style.configure('Separator.TFrame', background=self.colors['border'])

        # Hotkeys list
        list_frame = ttk.Frame(container)
        list_frame.pack(fill=tk.BOTH, expand=True)

        headers_frame = ttk.Frame(list_frame)
        headers_frame.pack(fill=tk.X, pady=(0, 10))

        ttk.Label(headers_frame,
                text="HOTKEY",
                font=('Segoe UI', 8),
                foreground='#888888').pack(side=tk.LEFT, padx=(0, 150))

        ttk.Label(headers_frame,
                text="ACTION",
                font=('Segoe UI', 8),
                foreground='#888888').pack(side=tk.LEFT)

        # Scrollable frame
        canvas = tk.Canvas(list_frame, bg=self.colors['bg'], highlightthickness=0)
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=canvas.yview)
        self.scrollable_frame = ttk.Frame(canvas, padding="10")

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )

        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Status bar
        self.status_var = tk.StringVar(value="Ready")
        status_label = ttk.Label(container,
                                textvariable=self.status_var,
                                font=('Segoe UI', 9),
                                foreground='#888888')
        status_label.pack(pady=(20, 0))

        self.update_hotkeys_list()

    def export_hotkeys(self):
        try:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".powerkey",
                filetypes=[("PowerKey Config", "*.powerkey"), ("All Files", "*.*")],
                title="Export Hotkeys"
            )

            if file_path:
                export_data = {
                    'hotkeys': self.hotkeys,
                    'version': '1.0',
                    'exported_at': time.strftime('%Y-%m-%d %H:%M:%S')
                }

                with open(file_path, 'w') as f:
                    json.dump(export_data, f, indent=2)

                self.status_var.set(f"Hotkeys exported successfully to {file_path}")
        except Exception as e:
            messagebox.showerror("Export Error", f"Failed to export hotkeys: {str(e)}")

    def import_hotkeys(self):
        try:
            file_path = filedialog.askopenfilename(
                filetypes=[("PowerKey Config", "*.powerkey"), ("All Files", "*.*")],
                title="Import Hotkeys"
            )

            if file_path:
                with open(file_path, 'r') as f:
                    import_data = json.load(f)

                if 'hotkeys' not in import_data:
                    raise ValueError("Invalid config file format")

                # Show confirmation dialog with preview
                preview_window = tk.Toplevel(self.root)
                preview_window.title("Import Preview")
                preview_window.configure(bg=self.colors['bg'])

                # Make the preview window always on top and modal
                preview_window.attributes('-topmost', True)
                preview_window.grab_set()

                preview_frame = ttk.Frame(preview_window, padding="20")
                preview_frame.pack(expand=True, fill=tk.BOTH)

                ttk.Label(preview_frame,
                        text="The following hotkeys will be imported:",
                        font=('Segoe UI', 10, 'bold')).pack(pady=(0, 10))

                # Create preview list
                preview_text = tk.Text(preview_frame,
                                    height=10,
                                    width=50,
                                    background=self.colors['entry'],
                                    foreground=self.colors['fg'])
                preview_text.pack(pady=(0, 20))

                for key, action in import_data['hotkeys'].items():
                    preview_text.insert(tk.END, f"Ctrl+Shift+Alt+{key}: {action}\n")
                preview_text.configure(state='disabled')

                def confirm_import():
                    # Merge or replace existing hotkeys
                    self.hotkeys.update(import_data['hotkeys'])
                    self.save_hotkeys()
                    self.update_hotkeys_list()
                    self.status_var.set(f"Imported {len(import_data['hotkeys'])} hotkeys")
                    preview_window.destroy()

                button_frame = ttk.Frame(preview_frame)
                button_frame.pack(pady=(0, 10))

                ttk.Button(button_frame,
                        text="Import",
                        style='Accent.TButton',
                        command=confirm_import).pack(side=tk.LEFT, padx=5)

                ttk.Button(button_frame,
                        text="Cancel",
                        command=preview_window.destroy).pack(side=tk.LEFT, padx=5)

        except Exception as e:
            messagebox.showerror("Import Error", f"Failed to import hotkeys: {str(e)}")

    def refresh_interface(self):
        # Store the current window geometry
        current_geometry = self.root.geometry()

        # Destroy all widgets in the main window
        for widget in self.root.winfo_children():
            widget.destroy()

        # Reset styles with new theme
        self.setup_styles()

        # Rebuild the complete interface
        self.setup_gui()

        # Restore window geometry
        self.root.geometry(current_geometry)

        # Update window transparency
        self.root.attributes('-alpha', self.settings['transparency'] / 100)

    def check_startup_status(self):
        if sys.platform != 'win32':
            return False

        app_path = sys.executable
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"

        try:
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_READ)
            try:
                value, _ = winreg.QueryValueEx(key, "PowerKey")
                return value == f'"{app_path}"'
            except WindowsError:
                return False
            finally:
                winreg.CloseKey(key)
        except WindowsError:
            return False

    def toggle_startup(self):
        if sys.platform != 'win32':
            messagebox.showwarning("Warning", "Startup configuration is only supported on Windows")
            return

        app_path = sys.executable
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"

        try:
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_ALL_ACCESS)

            if self.startup_enabled:
                # Remove from startup
                winreg.DeleteValue(key, "PowerKey")
                self.startup_enabled = False
                self.status_var.set("Removed from startup")
            else:
                # Add to startup
                winreg.SetValueEx(key, "PowerKey", 0, winreg.REG_SZ, f'"{app_path}"')
                self.startup_enabled = True
                self.status_var.set("Added to startup")

            winreg.CloseKey(key)
            self.startup_var.set("Startup: " + ("ON" if self.startup_enabled else "OFF"))

        except Exception as e:
            messagebox.showerror("Error", f"Failed to modify startup settings: {str(e)}")

    def show_help(self):
        help_window = tk.Toplevel(self.root)
        help_window.title("How to Use PowerKey")
        help_window.configure(bg=self.colors['bg'])

        window_width = 500
        window_height = 400
        screen_width = help_window.winfo_screenwidth()
        screen_height = help_window.winfo_screenheight()
        center_x = int((screen_width/2) - (window_width/2))
        center_y = int((screen_height/2) - (window_height/2))

        help_window.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')
        help_window.resizable(False, False)
        help_window.transient(self.root)
        help_window.grab_set()

        help_frame = ttk.Frame(help_window, padding="20")
        help_frame.pack(expand=True, fill=tk.BOTH)

        title = ttk.Label(help_frame,
                         text="How to Use PowerKey",
                         font=('Segoe UI', 20, 'bold'),
                         foreground=self.colors['accent'])
        title.pack(pady=(0, 20))

        content_frame = ttk.Frame(help_frame)
        content_frame.pack(expand=True, fill=tk.BOTH)

        scrollbar = ttk.Scrollbar(content_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        text_widget = tk.Text(content_frame,
                            wrap=tk.WORD,
                            yscrollcommand=scrollbar.set,
                            background=self.colors['bg'],
                            foreground=self.colors['fg'],
                            font=('Segoe UI', 10),
                            relief='flat',
                            padx=10,
                            pady=10,
                            height=15)
        text_widget.pack(expand=True, fill=tk.BOTH)

        scrollbar.config(command=text_widget.yview)

        help_text = """
1. Creating a Hotkey:
   • Command Key: Enter a single character (e.g., 'C', 'S', '1')
   • Action: Enter one of the following:
      - Built-in commands: calc, chrome, edge
      - Any program path or system command

2. Using Hotkeys:
   • Press Ctrl + Shift + Alt + your command key
   • The action will execute after the configured delay

3. Managing Hotkeys:
   • Delete: Click the × button next to any hotkey
   • Edit: Delete and re-add the hotkey with new settings
   • Export: Save your hotkey configuration to share with others
   • Import: Load hotkey configurations from other users

4. Settings:
   • Theme: Choose between light and dark mode
   • Enable/Disable Hotkeys: Toggle all hotkey functionality
   • Window Transparency: Adjust the window opacity
   • Hotkey Delay: Set the delay before executing hotkey actions
   • All settings are saved automatically

5. Startup Settings:
   • Click the Startup button to toggle auto-start with Windows
   • When ON, PowerKey will launch automatically at system startup
   • The setting persists between application restarts

6. Built-in Commands:
   • calc: Opens the system calculator
   • chrome: Launches Google Chrome browser
   • edge: Launches Microsoft Edge browser

7. Custom Commands:
   • You can enter any valid system command or program path
   • Examples:
      - notepad.exe
      - "C:\\Program Files\\Some App\\App.exe"
      - cmd.exe /c echo Hello
      - explorer.exe "C:\\Documents"

8. Sharing Hotkeys:
   • Export your configuration using the Export button
   • Share the .powerkey file with other users
   • Import configurations using the Import button
   • Preview imported hotkeys before confirming

9. Tips & Tricks:
   • Use simple, memorable keys for frequent actions
   • Test your commands before adding them as hotkeys
   • Keep track of your hotkey assignments
   • Avoid using system-reserved keys
   • Adjust the hotkey delay if actions trigger too quickly

10. Troubleshooting:
    • If a hotkey doesn't work:
      - Check if hotkeys are enabled in settings
      - Check if the program path is correct
      - Ensure you have necessary permissions
      - Verify the application isn't already running
    • For startup issues:
      - Check Windows Task Manager
      - Verify user account permissions
      - Check system event logs
"""

        text_widget.insert('1.0', help_text)
        text_widget.configure(state='disabled')

        button_frame = ttk.Frame(help_frame)
        button_frame.pack(pady=(20, 0))

        close_button = ttk.Button(button_frame,
                                text="Close",
                                style='Accent.TButton',
                                command=help_window.destroy)
        close_button.pack()

    def update_hotkeys_list(self):
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        for key, action in self.hotkeys.items():
            row_frame = ttk.Frame(self.scrollable_frame)
            row_frame.pack(fill=tk.X, pady=5)

            row_frame.bind('<Enter>', lambda e, f=row_frame: f.configure(style='Hover.TFrame'))
            row_frame.bind('<Leave>', lambda e, f=row_frame: f.configure(style='TFrame'))

            hotkey_text = f"Ctrl+Shift+Alt+{key}"
            ttk.Label(row_frame,
                    text=hotkey_text,
                    font=('Segoe UI', 10, 'bold')).pack(side=tk.LEFT, padx=(0, 20))

            ttk.Label(row_frame,
                    text=action,
                    font=('Segoe UI', 10)).pack(side=tk.LEFT, padx=(0, 20))

            delete_btn = ttk.Button(row_frame,
                                text="×",
                                width=3,
                                command=lambda k=key: self.delete_hotkey(k))
            delete_btn.pack(side=tk.RIGHT)

    def add_hotkey(self):
        key = self.command_key.get().strip().upper()
        action = self.action.get().strip()

        if not key or not action:
            messagebox.showerror("Error", "Both command key and action are required")
            return

        if len(key) != 1:
            messagebox.showerror("Error", "Command key must be a single character")
            return

        self.hotkeys[key] = action
        self.save_hotkeys()
        self.update_hotkeys_list()
        self.command_key.delete(0, tk.END)
        self.action.delete(0, tk.END)
        self.status_var.set(f"Added hotkey: Ctrl+Shift+Alt+{key}")

    def delete_hotkey(self, key):
        del self.hotkeys[key]
        self.save_hotkeys()
        self.update_hotkeys_list()
        self.status_var.set(f"Deleted hotkey: Ctrl+Shift+Alt+{key}")

    def save_hotkeys(self):
        config_path = Path.home() / '.hotkey_manager.json'
        with open(config_path, 'w') as f:
            json.dump(self.hotkeys, f)

    def load_hotkeys(self):
        config_path = Path.home() / '.hotkey_manager.json'
        if config_path.exists():
            with open(config_path) as f:
                self.hotkeys = json.load(f)

    def execute_action(self, action):
        try:
            if action.lower() == 'calc':
                if sys.platform == 'win32':
                    subprocess.Popen('calc.exe')
                else:
                    subprocess.Popen(['gnome-calculator'])
            elif action.lower() == 'chrome':
                if sys.platform == 'win32':
                    subprocess.Popen(['chrome'])
                else:
                    subprocess.Popen(['google-chrome'])
            elif action.lower() == 'edge':
                if sys.platform == 'win32':
                    subprocess.Popen(['msedge'])
                else:
                    self.status_var.set("Microsoft Edge is not supported on this OS")
                    return
            else:
                subprocess.Popen(action, shell=True)

            self.status_var.set(f"Executed: {action}")
        except Exception as e:
            self.status_var.set(f"Error executing action: {str(e)}")

    def check_hotkey(self, e):
        current_time = time.time()
        if (self.settings['hotkeys_enabled'] and
            e.event_type == 'down' and
            keyboard.is_pressed('ctrl+shift+alt') and
            (current_time - self.last_trigger_time) > self.debounce_interval):

            key = e.name.upper()
            if key in self.hotkeys:
                self.execute_action(self.hotkeys[key])
                self.last_trigger_time = current_time  # Update the last trigger time

    def start_listener(self):
        # Unhook any existing listeners to avoid duplicates
        keyboard.unhook_all()
        keyboard.on_press(self.check_hotkey)

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = HotkeyManager()
    app.run()
